; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=hs32 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=HS32

; This file is taken from RISC-V tests

define void @foo(i32 %a, i32 *%b, i1 %c) {
; HS32-LABEL: foo:
; HS32:       ; %bb.0:
; HS32-NEXT:    ldr r0, [r2]
; HS32-NEXT:    cmp r0, r1
; HS32-NEXT:    beq .LBB0_12
; HS32-NEXT:    jmp .LBB0_1
; HS32-NEXT:  .LBB0_1: ; %test2
; HS32-NEXT:    ldr r0, [r2]
; HS32-NEXT:    cmp r0, r1
; HS32-NEXT:    bne .LBB0_12
; HS32-NEXT:    jmp .LBB0_2
; HS32-NEXT:  .LBB0_2: ; %test3
; HS32-NEXT:    ldr r0, [r2]
; HS32-NEXT:    cmp r0, r1
; HS32-NEXT:    bgt .LBB0_12
; HS32-NEXT:    jmp .LBB0_3
; HS32-NEXT:  .LBB0_3: ; %test4
; HS32-NEXT:    ldr r0, [r2]
; HS32-NEXT:    cmp r0, r1
; HS32-NEXT:    bge .LBB0_12
; HS32-NEXT:    jmp .LBB0_4
; HS32-NEXT:  .LBB0_4: ; %test5
; HS32-NEXT:    ldr r0, [r2]
; HS32-NEXT:    cmp r1, r0
; HS32-NEXT:    bab .LBB0_12
; HS32-NEXT:    jmp .LBB0_5
; HS32-NEXT:  .LBB0_5: ; %test6
; HS32-NEXT:    ldr r0, [r2]
; HS32-NEXT:    cmp r1, r0
; HS32-NEXT:    bbe .LBB0_12
; HS32-NEXT:    jmp .LBB0_6
; HS32-NEXT:  .LBB0_6: ; %test7
; HS32-NEXT:    ldr r0, [r2]
; HS32-NEXT:    cmp r0, r1
; HS32-NEXT:    blt .LBB0_12
; HS32-NEXT:    jmp .LBB0_7
; HS32-NEXT:  .LBB0_7: ; %test8
; HS32-NEXT:    ldr r0, [r2]
; HS32-NEXT:    cmp r0, r1
; HS32-NEXT:    ble .LBB0_12
; HS32-NEXT:    jmp .LBB0_8
; HS32-NEXT:  .LBB0_8: ; %test9
; HS32-NEXT:    ldr r0, [r2]
; HS32-NEXT:    cmp r0, r1
; HS32-NEXT:    bab .LBB0_12
; HS32-NEXT:    jmp .LBB0_9
; HS32-NEXT:  .LBB0_9: ; %test10
; HS32-NEXT:    ldr r0, [r2]
; HS32-NEXT:    cmp r0, r1
; HS32-NEXT:    bbe .LBB0_12
; HS32-NEXT:    jmp .LBB0_10
; HS32-NEXT:  .LBB0_10: ; %test11
; HS32-NEXT:    ldr r0, [r2]
; HS32-NEXT:    and r0, r3, 1
; HS32-NEXT:    cmp r0, 0
; HS32-NEXT:    bne .LBB0_12
; HS32-NEXT:    jmp .LBB0_11
; HS32-NEXT:  .LBB0_11: ; %test12
; HS32-NEXT:    ldr r0, [r2]
; HS32-NEXT:  .LBB0_12: ; %end
; HS32-NEXT:    mov pc, lr

  %val1 = load volatile i32, i32* %b
  %tst1 = icmp eq i32 %val1, %a
  br i1 %tst1, label %end, label %test2

; Test every branch condition

test2:
  %val2 = load volatile i32, i32* %b
  %tst2 = icmp ne i32 %val2, %a
  br i1 %tst2, label %end, label %test3

test3:
  %val3 = load volatile i32, i32* %b
  %tst3 = icmp slt i32 %val3, %a
  br i1 %tst3, label %end, label %test4

test4:
  %val4 = load volatile i32, i32* %b
  %tst4 = icmp sge i32 %val4, %a
  br i1 %tst4, label %end, label %test5

test5:
  %val5 = load volatile i32, i32* %b
  %tst5 = icmp ult i32 %val5, %a
  br i1 %tst5, label %end, label %test6

test6:
  %val6 = load volatile i32, i32* %b
  %tst6 = icmp uge i32 %val6, %a
  br i1 %tst6, label %end, label %test7

test7:
  %val7 = load volatile i32, i32* %b
  %tst7 = icmp sgt i32 %val7, %a
  br i1 %tst7, label %end, label %test8

test8:
  %val8 = load volatile i32, i32* %b
  %tst8 = icmp sle i32 %val8, %a
  br i1 %tst8, label %end, label %test9

test9:
  %val9 = load volatile i32, i32* %b
  %tst9 = icmp ugt i32 %val9, %a
  br i1 %tst9, label %end, label %test10

test10:
  %val10 = load volatile i32, i32* %b
  %tst10 = icmp ule i32 %val10, %a
  br i1 %tst10, label %end, label %test11

; Check the case of a branch where the condition was generated elsewhere

test11:
  %val11 = load volatile i32, i32* %b
  br i1 %c, label %end, label %test12

test12:
  %val12 = load volatile i32, i32* %b
  br label %end

end:
  ret void
}
